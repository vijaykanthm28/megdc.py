import pkg_resources
import argparse
import logging
import textwrap
import os
import sys
import megdc



__header__ = textwrap.dedent("""

    Megam System  megdc-%s

Full documentation can be found at: http://docs.megam.io
""" % megdc.__version__)


def log_flags(args, logger=None):
    logger = logger or LOG
    logger.info('megdc options:')

    for k, v in args.__dict__.items():
        if k.startswith('_'):
            continue
        logger.info(' %-30s: %s' % (k, v))

def install():
    print "install called"



def get_parser():
    parser = argparse.ArgumentParser(
        prog='megdc',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='Datacenter ready in minutes \n\n%s' % __header__,
        )
    parser.add_argument(
        '--version',
        action='version',
        version='%s' % megdc. __version__,
        help='the current installed version of megdc',
        )

# create the top-level parser
    subpar = parser.add_subparsers(
        title='commands',
        metavar='COMMAND',
        help='description',
        )
  
    entry_p = {}
    for ep in pkg_resources.iter_entry_points(group='megdc.cli',name= None):
        if not entry_p.has_key(ep.dist):
           entry_p[ep.dist] = {}
        entry_p.update({ep.name:ep.load()})
        subpar.add_parser(
            ep.name,
            description=ep.load().__doc__,
            help=ep.name.__doc__,
            )
        #print ep.name
    
    return parser

    

#@catches((KeyboardInterrupt, RuntimeError, exc.DeployError,), handle_all=True)
def _main(args=None, namespace=None):
    
    parser = get_parser()
    if len(sys.argv) < 2:
        
        parser.print_help()
        sys.exit()
    else:
        args = parser.parse_args(args=args, namespace=namespace)

    
    return args.func(args)


def main(args=None, namespace=None):
    try:
        _main(args=args, namespace=namespace)
    finally:
        # This block is crucial to avoid having issues with
        # Python spitting non-sense thread exceptions. We have already
        # handled what we could, so close stderr and stdout.
        if not os.environ.get('MEGAM_TEST'):
            try:
                sys.stdout.close()
            except:
                pass
            try:
                sys.stderr.close()
            except:
                pass
